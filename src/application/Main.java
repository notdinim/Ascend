/** ICS4U1 CPT: ASCEND
 * 	NAME: DINIM ONYIGE
 * 	TEACHER: MR CONWAY
 * 	PROGRAM DESCRIPTION: WHEN THIS PROGRAM IS RUN, YOU WILL BE PROMPTED WITH A SIGN UP OR LOGIN SCREEN. IF YOU
 * 						ARE A NEW PLAYER, YOU WOULD ENTER A USERNAME AND THEN CREATE A PASSWORD AND CLICK SIGN UP.
 * 						ONCE SIGN UP BUTTON IS CLICKED, IT WILL STORE YOUR USERNAME AND PASSWORD TO THE DATABASE AND
 * 						TAKE YOU TO THE MENU SCREEN. IF YOU ARE A RETURNING PLAYER, YOU WILL BE ABLE TO ENTER A 
 * 						USERNAME AND PASSWORD AND CLICK LOGIN. ONCE LOGIN IS CLICKED, IT WILL SEARCH THE DATABASE
 * 						TO FIND OUT IF THE USERNAME-PASSWORD KEY IS PRESENT. IF IT FINDS THIS, IT WILL SHOW A 
 * 						SUCCESS MESSAGE AND THE MENU SCREEN WILL BE DISPLAYED. ONCE ON THE MENU SCREEN, YOU WILL
 * 						HAVE 4 BUTTONS: PLAY, TUTORIAL, CREDITS AND EXIT. THE EXIT BUTTON WILL QUIT THE PROGRAM.
 * 						THE CREDITS WILL SHOW WHO HELPED MAKE THE GAME. THE TUTORIAL WILL GO THROUGH STEP BY STEP
 * 						HOW TO PLAY THE GAME. IT WILL DIRECT THE PLAYER WHERE TO GO AND TELL THEM THE OBJECTIVE OF
 * 						THE GAME. THE OBJECTIVE IS THE GO TO THE GATE, FIGHT MONSTERS, AND IF YOU BEAT THE BOSS,
 * 						YOU WILL BE REWARDED WITH COINS. YOU CAN USE THESE COINS TO BUY UPGRADES AND THESE WILL
 * 						HELP YOU FIGHT STRONGER MONSTERS. IF YOU ARE A NEW PLAYER AND YOU CLICK PLAY, YOU WILL
 * 						BE PROMPTED TO PICK A CHARACTER. YOU HAVE THE OPTION OF MAGE OR SAMURAI. THESE HAVE DIFFERENT
 * 						STATS THAT COULD AID YOU WHEN PLAYING THE GAME. ONCE YOU PICK YOUR CHARACTER, YOU WILL BE 
 * 						TAKEN TO THE TOWN SCREEN. IF YOU ARE A RETURNING PLAYER AND YOU ALREADY HAVE A CHARACTER, 
 * 						WHEN YOU CLICK PLAY, IT WILL BE LOADED FROM THE DATABASE AND YOU WILL BE TAKEN TO THE TOWN
 * 						SCREEN. ONCE IN THE TOWN SCREEN, YOU WILL BE ABLE TO GO TO THE GATE OR TALK TO AN OLD MAN.
 * 						ONCE YOU TOUCH THE GATE AND CLICK ON THE QUESTION MARK, YOU WILL BE PROMPTED TO PICK WHAT
 * 						LEVEL YOU WANT TO PLAY IN. LEVELS GO 1 TO 4 AND THEY INCREASE IN DIFFICULTY. ONCE YOU PICK
 * 						A LEVEL, YOU WILL BE TAKEN TO THE LEVEL'S ARENA. YOU WILL START AT THE BOTTOM AND WILL HAVE
 * 						TO "ASCEND" TO THE TOP AND DEFEAT THE BOSS. THE BOSS WILL BE AT THE TOP SPAWNING MINIONS.
 * 						THESE MINIONS WILL HAVE A CHANCE OF EXPLODING ONCE THEY COME IN CONTACT WITH YOU. YOU 
 * 						WILL HAVE TO ACSCND TO THE TOP WHILE USING YOUR ATTACKS (LEFT CLICK, RIGHT CLICK, E) TO
 * 						DESTROY THE MINIONS. IF YOU DEFEAT THE BOSS OR YOU DIE, YOU WILL BE BROUGHT BACK TO THE TOWN
 * 						SCREEN. YOU WILL GET COINS IF YOU BEAT THE BOSS AND YOU WOULDN'T GET ANY COINS IF YOU DIE. 
 * 						IF YOU GO TO THE OLD MAN, YOU CAN USE YOUR COINS TO BUY BETTER PROJECTILES AND THESE WILL HELP
 * 						YOU WHEN FIGHTING STRONGER MONSTERS. IF YOU FEEL LIKE TAKING A BREAK AND QUITTING THE GAME,
 * 						YOU WILL CLICK THE X TO CLOSE THE WINDOW AND THIS WILL SHOW A PROMP SAYING THAT YOUR DATA WILL
 * 						BE SAVED. ONCE YOU CLICK OK, THE GAME WILL STORE YOUR USERNAME, PASSWORD, CHARACTER, COINS AND
 * 						THE PROJECTILE UPGRADE YOU HAD. GOODLUCK!
 * 
 *	PROGRAM DETAILS:	JAVAFX COMPONENTS:  JAVAFX COMPONENTS ARE USED THROUGHOUT THE PROGRAM.d FOR THE LOG IN SCREEN, I 
 *											USE TEXT FIELDS, PASSWORD FIELDS, LABELS AND THE BUTTON CLASS. I ALSO USE ALETS
 *											TO SHOW THE USER IF THEIR INPUT WAS RIGHT OR WRONG. IN THE TOWN SCREEN, I USE
 *											LABELS FOR THE PLAYER'S NAME AND THE AMOUNT OF COINS THEY HAVE. I ADD THESE
 *											COMPONENTS TO THE PANE.
 *						ALERTS WITH IMAGES: I USE ALERTS IN THE LOG IN SCREEN. THESE HAVE DEFAULT ICONS ON THEM AND I CLEAR
 *											THE BUTTONS AND ADD A CUSTOM OK BUTTON. IN THE MENU SCREEN, I USE A CHOICE DIALOG
 *											WITH CUSTOM IMAGES OF THE CHARACTERS TO PICK. I ALSO USE ALERTS WITH CUSTOM IMAGES
 *											AND BUTTONS WHEN THE PLAYER CLICKS TUTORIAL OR CREDITS. IN THE TOWN SCREEN, I USE
 *											ALERTS FOR WHEN EACH OF THE NPCS ARE CLICKED. THEY ALL HAVE CUSTOM IMAGES CATERED TO
 *											THE MESSAGE THEY DISPLAY. I REMOVE THE DEFAULT BUTTONS AND ADD MY OWN. IN THE SHOP,
 *											THE ALERT DISPLAYS THE IMAGE OF THE NEXT FIREBALL UPGRADE
 *						MULTIPLE LAYOUTS:	I USE A FLOWPANE AND 2 VBOXES IN THE LOGNIN SCREEN. ONE VBOX HOLDS
 *											THE SIGN IN AND LOGIN BUUTTONS. THE OTHER VBOX HOLDS THE LABEL PROMPTS,
 *											THE TEXT FIELD AND PASSWORD FIELD. I ADD BOTH THESE VBOXES TO A HORIZONTALLY ORIENTED
 *											FLOWPANE. I THEN ADD THE FLOW PANE TO THE GRIDPANE ON THE LOGIN SCREEN. FOR THE REST OF
 *											THE PROGRAM, I USE A PANE FOR THE MAIN GAME			
 *						1D AND 2D ARRAYS:	I USE 2D ARRAYS IN MY TOWN AREA. I USE THIS TO IMPLEMENT BOUNDARY CHECKING FOR THE MAP.
 *											THE ROW[0] IS ALL THE PLACES WHERE MY PLAYER SHOULDN'T BE ABLE TO MOVE UP, ROW[1] IS
 *											FOR RIGHT, ROW[2] IS FOR DOWN AND ROW[3] IS FOR LEFT. FOR THE 1D ARRAYS, I IMPLEMENTED
 *											THIS IN MY LEVEL AREAS. I ADDED 2 SETS OF ARRAYS. ONE FOR ALL THE TOP PART OF THE PLATFORMS
 *											AND ANOTHER FOR ALL THE BOTTOM PARTS OF THE PLATFORMS. THIS MADE BOUNDARY CHECKING THE PLATFORMS
 *											MORE EFFICIENT
 *						SORTING/SEARCHING:	I IMPLEMENTED ONE OF THE SORTING METHODS USED IN CLASS. THE METHOD I USED WAS SELECTION SORT. I
 *											USED IT IN MY DATABASE. WHENEVER THE DATABASE IS OVERRIDDEN AND A NEW PLAYER IS ADDED, IT SORTS
 *											THE DATABASE TO MAKE READING IT EASIER. THE SEARCHING METHOD I USED IS A LINEAR SEARCH. I USE THIS
 *											IN MY DATABASE WHEN LOOKING FOR MATCHING USERNAME-KEY TO LOG THE USER IN. 
 *						OOP (CLASSES):		I HAVE A TOTAL OF 22 CLASSES. I HAVE 4 FOR FOR MY LEVELS, 4 FOR MY BOSSES, 4 FOR MY MINIONS, A CLASS
 *											FOR MY MENU SCREEN AND MY TOWN SCREEN. I ALSO HAVE A CLASS FOR MY MAGE AND THE MAGE SPECIFIC
 *											PROJECTILE, A CLASS FOR MY SAMURAI. I ALSO HAVE A CLASS THAT HANDLES MY DATABASE. A CLASS FOR THE
 *											PROJECTILE YOU CAN BUY IN GAME. FINALLY A CLASS THAT HANDLES ALL THE OTHER CLASSES "UNTITLEDHANDLER".
 *											I THINK THIS DEMONSTRATES A GOOD USE OF OOP AS ALL THE CLASSES ARE ALL PUT THE GOOD USE AND THEY MAKE
 *											THE PROGRAM EFFICIENT
 *						ABSTRACT CLASSES:	I MAKE ALL MY LEVEL CLASSES ABSTRACT. I DO THIS BECAUSE THEY ALL DO THE SAME THING BUT HAVE DIFFERENT
 *											EVENT THAT HAVE TO HAPPEN IN THEM. THEY ALL EXTEND THE ABSTRACT CLASS "LEVELS"
 *						INHERITANCE:		I USE INHERITANCE THROUGHOUT THE PROGRAM. MY SPECIFIC LEVEL CLASSES EXTEND THE ABSTRACT CLASS LEVEL.
 *											MY MINION CLASSES ALL EXTEND THEIR BOSS CLASSES AND INHERIT THEIR VALUES AND METHODS.
 *						POLYMORPHISM: 		I IMPLEMENT POLYMORPHISM WHEN WORKING ON MY ENEMY CLASSES. MY MINION CLASSES EXTEND THEIR SPECIFIC BOSSES.
 *											THERE IS ALSO METHOD OVVERIDING HAPPENING. THIS MEANS THAT POLYMORPHISM IS IN PLAY. THE MINIONS
 *											ALSO HAVE MORE ABILITIES LIKE EXPLODING THIS IS WHY I THOUGHT IT'D BE A GOOD PLACE TO USE POLYMORPHISM
 *						ANIMATION:			I USE A MIX OF ANIMATION TIMER AND TIMELINES TO PUT THE GAME TOGETHER. ALL THE MOVEMENT IN THE GAME IS
 *											DONE WITH ANIMATION TIMERS. THE RATES AT WHICH THE MINIONS SPAWN IS DONE WITH A KEYFRAME AND A TIMELINE.
 *											THIS WAS A BETTER OPTION TO USE THAN THE ANIMATION TIMER BECAUSE I COULD SPECIFY THE TIME INTERVALS RATHER
 *											THAN HAVING IT RUN ON THE COMPUTER'S REFRESH RATE. I ALSO USE KEYFRAMES AND TIMELINE WHEN DEALING WITH
 *											ATTACK COOLDOWNS. I USE THESE HERE TO PREVENT SPAMMING OF MOVES. THIS ADDS A DEBOUNCE AND MAKES THE GAME
 *											MORE DIFFICULT.
 *						COLLISION DETECTION:I CHECK FOR COLLISION IN THE TOWN AND LEVEL ASPECTS OF THE GAME. THE TOWN HAS BOUNDS AROUND IT THAT PREVENT
 *											THE PLAYER FRO MOVING THROUGH BUILDINGS AND OFF THE SCENE. THE LEVELS HAVE COLLISION DETECTION FOR THE PLATFORMS.
 *											THIS ALLOWS ME TO DECIDE WHEN TO TURN GRAVITY OFF DEPENDING ON IF THE PLAYER IS TOUCHING A PLATFORM OR NOT. I
 *											ALSO USE COLLISION DETECTION WHEN MAKING THE ATTACKS. I CREATE HITBOXES TO THE LEFT AND RIGHT OF THE PLAYER AND
 *											CHECK IF THEY ARE TOUCHING ANY ENEMIES WHEN THE LEFT OF RIGHT CLICK IS CLICKED. I ALSO USE COLLISIONS FOR MY PROJECTILE
 *											AND CONSTANTLY CHECK IF THEY ARE TOUCHING ENEMIES IN THEIR ANIMATION TIMERS.
 *						FILE CLASS:			THIS IS ONE OF THE BIGGEST ASPECTS OF MY GAME. THE GAME IS CENTERED AROUND THE IDEA OF BEING ABLE TO SAVE YOUR VALUES.
 *											I USE THE FILE CLASS TO CREATE A DATABASE. IN THE DATABASE.JAVA, THERE ARE 3 MAIN METHODS I USE. THE FIRST ONE IS
 *											THE CREATENEWACCOUNT METHOD. I OPEN THE FILE READER AND WRITER. I RUN A LINEAR SEARCH CHECKING FOR IF ANY USERNAMES MATCH
 *											THE ONE INPUTTED. IF ANY ARE FOUND, IT RETURNS AN ALERT BACK TELLING THE USER THAT THAT USERNAME ALREADY EXISTS. IF IT ISN'T
 *											FOUND, THE ACCOUNT IS CREATED AND THEN STORED TO THE DATABASE FILE. THE SECOND METHOD I USE IS THE LOAD ACCOUNT METHOD. THIS
 *											CHECKS IF THE USERNAME-PASSWORD KEY IS CORRECT. IT RUNS A LINEAR SEARCH LOOKING FOR THE SPECIFIC 2 ITEMS AND RETURNS A 
 *											SUCCESS MESSAGE IF THEY ARE FOUND. IT THEN CHANGES SCENES TO THE MENU SCENE. IF IT ISN'T FOUND, IT RETURNS AN ALERT THAT SAYS
 *											THAT EITHER THE USERNAME OR PASSWORD IS WRONG. THE LAST MAJOR METHOD IN THE DATABASE IS THE SAVE METHOD. THIS HAPPENS LATE
 *											GAME. IT OCCURS WHEN THE PLAYER TRIES TO CLOSE THEIR SCREEN. THEY ARE SHOWN AN ALERT THAT SAYS THEIR DATA WILL BE SAVED. ONCE
 *											THEY CLICK OKAY, A FILEWRITER THAT DOES NOT APPEND IS OPENED. THIS REWRITES THE FILE WITH THE NEW VALUE AND IT ALSO SORTS THE 
 *											DATABASE AT THIS POINT.
 *						ARRAYLISTS:			I USE ARRAYLISTS IN 2 PLACES IN THIS PRORGAM. THE FIRST PLACE IS DEALING WITH THE MAGE AND GENERAL PROJECTILE. I USE THIS TO
 *											CREATE MORE OF THEM ONCE THEIR RESPECTIVE KEYS ARE PRESSED. I GET RID OF THEM AND REMOVE THEM FROM THE LIST IF THEY COLLIDE
 *											WITH ENEMIES OR LEAVE THE SCREEN. THE SECOND PLACE I USE ARRAYLIST IS IN THE CREATION OF MINIONS. I MAKE AN ARRAYLIST OF THE MINION
 *											OBJECT. THIS ALLOWS MY BOSSES TO KEEP SPAWNING MINIONS WHEN THE SPAWNRATE CHANCE HAS BEEN REACHED. I REMOVE THEM FROM THE PANE AND
 *											ARRAYLIST ONCE THEY EXPLODE ON THE PLAYER.
 *						SOUNDS:				I HAVE BACKGROUND MUSIC FOR THE MENU SCREEN AND THE TOWN SCREEN. EACH OF THE DIFFERENT LEVELS HAVE THEIR OWN UNIQUE BACKGROUND
 *											MUSIC THAT MATCH THE VIBE OF THE ENEMIES. I USE THE AUDIOCLIP CLASS TO CREATE SOUND EFFECTS. I ADDDED A SLASH EFFECT WHEN
 *											ATTACK 1 PLAYS. I ALSO ADD A MAGIC WHOOSH SOUND EFFECT FOR WHEN THE PROJECTILES ARE FIRED. I HAVE AN EXPLOSION SOUND EFFECT
 *											THAT PLAYS WHEN THE MINIONS TOUCH YOU AN EXPLODE. AFTER THE LEVEL IS DONE, IF YOU WERE SUCCESSFUL, YOU WILL HEAR THE BOSS
 *											AFTER THE SCENE HAS CHANGED. IT IS A MONSTER GROANING SOUND EFFECT BECAUSE THE BOSS HAS DIED. IF YOU ARE UNSUCCESSFUL AND YOU DIE,
 *											AN AUDIOCLIP OF A HEART BEATING WILL PLAY AFTER THE LEVEL IS FINISHED.
 *
 *	
 *
 *	RESOURCES: https://docs.oracle.com/javase/8/docs/api/
 */



// IMPORTS
package application;
	
import java.util.ArrayList;

import javafx.application.Application;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Orientation;
import javafx.geometry.Pos;
import javafx.geometry.VPos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;

// MAIN CLASS
public class Main extends Application {

	// GAME HANDLERS
	protected boolean boolHandlerRoot0 = true;
	protected boolean BOOL_LOADED_ACCOUNT, BOOL_NEW_ACCOUT;
	protected boolean boolTownScreen;
	
	// ROOT 0 PANE
	private GridPane root0;
	protected Database db;
	private TextField usr;
	private Label lblU, lblP, lblPrompt;
	private PasswordField key;
	// SIGN UP AND LOGIN BUTTONS
	private Button signup, login;
	// FONT OBJECTS
	protected static  Font f;	
	// PLAYER VALUES
	protected static ArrayList<String> plrData;
	
	// START STAGE
	public void start(Stage primaryStage) {
		try {
			
			// STAGE
			primaryStage.setResizable(false);
			primaryStage.setFullScreen(false);
			primaryStage.centerOnScreen();
			
			// INITIATING PLAYER VALUES
			Main.plrData = new ArrayList<String>();
			
			// INITIATING DATABASE
			db = new Database(primaryStage);
			
			// INITIALIZING GRIDPANE
			root0 = new GridPane();
			root0.setStyle("-fx-background-color: black");
			Scene scene = new Scene(root0);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setTitle("ASCEND");
			
			// INTIIALIZING FLOWPANE LAYOUT
			FlowPane fpRoot = new FlowPane();
			fpRoot.setColumnHalignment(HPos.CENTER);
			fpRoot.setOrientation(Orientation.HORIZONTAL);
			fpRoot.setAlignment(Pos.TOP_CENTER);
			FlowPane.setMargin(fpRoot, new Insets(20, 10, 20, 10));
			fpRoot.setHgap(30);
			
			// INITIALIZING VBOX LAYOUT
			VBox vbRoot = new VBox();
			vbRoot.setPadding(new Insets(10, 10, 10, 10));
			vbRoot.setSpacing(20);
			vbRoot.setAlignment(Pos.CENTER);
			
			// INITIALIZING VBOX LAYOUT
			VBox vbRoot2 = new VBox();
			vbRoot2.setPadding(new Insets(10, 10, 10, 0));
			vbRoot2.setSpacing(10);
			vbRoot2.setAlignment(Pos.TOP_CENTER);
			
			// ROOT 0 FONT
			f = Font.loadFont("file:fonts\\LindsayEF Regular.otf", 36);
			
			// LABEL FOR SIGN UP INSTRUCTIONS
			lblPrompt = new Label();
			lblPrompt.setText("Username Cannot Contain Special Characters\n(Only Letters And Numbers)");
			lblPrompt.setTextAlignment(TextAlignment.CENTER);
			lblPrompt.setAlignment(Pos.CENTER_RIGHT);
			lblPrompt.setFont(f);
			lblPrompt.setTextFill(Color.WHITE);

			// LABEL FOR USERNAME INPUT
			lblU = new Label();
			lblU.setText("Enter Username:");
			lblU.setPrefSize(250, 20);
			lblU.setAlignment(Pos.TOP_CENTER);
			lblU.setFont(f);
			lblU.setTextFill(Color.WHITE);
			
			// TEXT FIELD FOR USERNAME INPUT
			usr = new TextField();
			usr.setAlignment(Pos.CENTER);
			usr.setPrefSize(200, 20);
			
			// LABEL FOR PASSWORD INPUT 
			lblP = new Label();
			lblP.setText("Enter Password:");
			lblP.setPrefSize(250, 20);
			lblP.setAlignment(Pos.TOP_CENTER);
			lblP.setFont(f);
			lblP.setTextFill(Color.WHITE);
			
			// PASSWORD FIELD FOR KEY INPUT
			key = new PasswordField();
			key.setAlignment(Pos.CENTER);
			key.setPrefSize(200, 20);
			
			// ADDING LABELS AND USER INPUT AREAS TO FIRST VBOX
			vbRoot2.getChildren().addAll(lblU, usr, lblP, key);
			
			// SIGN UP BUTTON
			signup = new Button();
			signup.setText("SIGN UP");
			signup.setPrefSize(200, 40);
			signup.setAlignment(Pos.CENTER);
			signup.setStyle("-fx-background-color: white");
			signup.setOnAction(e -> db.createNewAccount(usr.getText(), key.getText()));
			signup.setFont(Font.loadFont("file:fonts\\LindsayEF Regular.otf", 18));
			signup.setTextFill(Color.BLACK);
			
			// LOGIN BUTTON
			login = new Button();
			login.setText("LOGIN");
			login.setPrefSize(200, 40);
			login.setAlignment(Pos.CENTER);
			login.setStyle("-fx-background-color: white");
			login.setOnAction(e -> db.loadAccount(usr.getText(), key.getText()));
			login.setFont(Font.loadFont("file:fonts\\LindsayEF Regular.otf", 18));
			login.setTextFill(Color.BLACK);
			
			// ADDING BUTTONS TO SECOND VBOX
			vbRoot.getChildren().addAll(signup, login);
			
			// ADDING BOTH VBOXES TO A FLOWPANE
			fpRoot.getChildren().addAll(vbRoot2, vbRoot);
			
			// ADDING NODES TO GRIDPANE
			root0.add(lblPrompt, 0, 0);
			GridPane.setColumnSpan(lblPrompt, 2);
			GridPane.setValignment(lblPrompt, VPos.CENTER);
			GridPane.setHalignment(lblPrompt, HPos.CENTER);
			GridPane.setMargin(lblPrompt, new Insets(20, 10, 0, 10));
			
			// ADDING FLOWPANE TO GRIDPANE
			root0.add(fpRoot, 0, 1);
			GridPane.setValignment(fpRoot, VPos.TOP);
			GridPane.setHalignment(fpRoot, HPos.CENTER);
			GridPane.setColumnSpan(fpRoot, 2);
		
			// SETTING SCENE TO STAGE AND MAKING IT VISIBLE
			primaryStage.setScene(scene);
			primaryStage.show();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	// LAUNCHING
	public static void main(String[] args) {
		launch(args);
	}
}
